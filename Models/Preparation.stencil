{# One preparation file per model #}

{% for type in types.based.Model|!protocol|annotated:"model"|!annotated:"ignorePreparation" %}
// sourcery:file:Models/{{ type.localName }}/{{ type.localName }}+Preparation.generated.swift

import Vapor
import Fluent
{% if type.annotations.import %}
import {{ type.annotations.import }}
{% else %}
{% for var in type.annotations.imports %}
import {{ var }}
{% endfor %}
{% endif %}

extension {{ type.localName }}: Preparation {
	internal enum DatabaseKeys {
		static let id = {{ type.localName }}.idKey
		{% for var in type.storedVariables|!annotated:"ignore"|!annotated:"ignorePrep" %}
		static let {% if var.annotations.databaseKey %}{{ var.annotations.databaseKey }}{% else %}{{ var.name }}{% endif %} = "{% if var.annotations.databaseKey %}{{ var.annotations.databaseKey }}{% else %}{{ var.name }}{% endif %}"
		{% endfor %}
	}

	// MARK: - Preparations ({{ type.name }})
	internal static func prepare(_ database: Database) throws {
		try database.create(self) {
			$0.id()
			{% for var in type.storedVariables|!annotated:"ignore"|!annotated:"ignorePrep" %}
			$0.{% if var|annotated:"preparation" %}{{ var.annotations.preparation }}{% elif var|annotated:"enumName" %}enum{% else %}{{ var.typeName.description|lowercase|replace:"?","" }}{% endif %}{% if var.annotations.preparation == "foreignId" %}(for: {{ var.annotations.foreignTable }}.self, optional: {% if var.isOptional %}true{% else %}false{% endif %}, unique: {{ var.annotations.unique }}, foreignIdKey: {% if var.annotations.foreignIdKey %}"{{ var.annotations.foreignIdKey }}"{% else %}{{ var.annotations.foreignTable }}.idKey{% if var.annotations.foreignKeyName %}, foreignKeyName: "{{ var.annotations.foreignKeyName }}"{% endif %}{% endif %}){% elif var.annotations.enumName %}(DatabaseKeys.{% if var.annotations.databaseKey %}{{ var.annotations.databaseKey }}{% else %}{{ var.name }}{% endif %}, options: {{ var.annotations.enumName }}.allDescription){% else %}(DatabaseKeys.{% if var.annotations.databaseKey %}{{ var.annotations.databaseKey }}{% else %}{{ var.name }}{% endif %}{% if var.annotations.type %}, type: "{{ var.annotations.type }}"{% endif %}{% if var.isOptional %}, optional: true{% endif %}){% endif %}
			{% endfor %}
		}

		{% for var in type.storedVariables|!annotated:"ignore"|!annotated:"ignorePrep"|annotated:"index" %}
		try database.index(DatabaseKeys.{% if var.annotations.databaseKey %}{{ var.annotations.databaseKey }}{% else %}{{ var.name }}{% endif %}, for: {{ type.name }}.self)
		{% endfor %}
	}

	internal static func revert(_ database: Database) throws {
		try database.delete(self)
	}
}
// sourcery:end
{% endfor %}
