{% for type in types.implementing.Controller|!protocol %}
// sourcery:file:Routes/{{ type.annotations.collection }}Routes/{{ type.annotations.collection }}Routes.generated.swift

import Vapor

final class {{ type.annotations.collection }}Routes: RouteCollection {
    private let controller: {{ type.localName }}
    private let middlewares: [Middleware]

    internal init(
        controller: {{ type.localName }},
        middlewares: [Middleware]
    ) {
        self.controller = controller
        self.middlewares = middlewares
    }

    func build(_ builder: RouteBuilder) throws {
        builder.grouped("{{ type.annotations.group }}").group(middleware: middlewares) { routes in
            {% for func in type.methods where func|annotated:"route" %}
            // {{ func.annotations.method|uppercase }} /{{ type.annotations.group }}{{ func.annotations.path }}
            routes.{{ func.annotations.method }}("{{ func.annotations.path }}", handler: controller.{{ func.shortName }})
            {% endfor %}
        }
    }
}
// sourcery:end
{% endfor %}